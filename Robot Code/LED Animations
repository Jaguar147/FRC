// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

//intake = 17
//outtake = 12
//voltage = 0.44 (for feedforward)

package frc.robot;

import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import com.ctre.phoenix6.controls.ColorFlowAnimation;
import com.ctre.phoenix6.controls.FireAnimation;
import com.ctre.phoenix6.controls.LarsonAnimation;
import com.ctre.phoenix6.controls.StrobeAnimation;
import com.ctre.phoenix6.hardware.CANdle;
import com.ctre.phoenix6.hardware.TalonFX;
import com.ctre.phoenix6.signals.RGBWColor;
import edu.wpi.first.wpilibj.PS5Controller;

/**
 * The methods in this class are called automatically corresponding to each mode, as described in
 * the TimedRobot documentation. If you change the name of this class or the package after creating
 * this project, you must also update the Main.java file in the project.
 */
public class Robot extends TimedRobot {
  private final TalonFX intakeMotor = new TalonFX(17);
  private final TalonFX outtakeMotor = new TalonFX(12);
  private final PS5Controller PS5 = new PS5Controller(0);
  private final CANdle candle = new CANdle (18, "rio");

 /* private static final RGBWColor Green = new RGBWColor(0, 217, 0, 0);
  private static final RGBWColor Blue = new RGBWColor(0, 0, 217, 0);
  private static final RGBWColor Red = new RGBWColor(217, 0, 0, 0); */ 
  private static final RGBWColor Lavender = new RGBWColor(230, 230, 250, 0);
  private static final RGBWColor Teal = new RGBWColor(0, 128, 128, 0);
  private static final RGBWColor Coral = new RGBWColor(248, 131, 121, 0);


  /**
   * This function is run when the robot is first started up and should be used for any
   * initialization code.
   */
  public Robot() {
  }

  /*
   * This function is called every 20 ms, no matter the mode. Use this for items like diagnostics
   * that you want ran during disabled, autonomous, teleoperated and test.
   *
   * <p>This runs after the mode specific periodic functions, but before LiveWindow and
   * SmartDashboard integrated updating.
   */

  @Override
  public void robotPeriodic() {
  }

  /*
   * This autonomous (along with the chooser code above) shows how to select between different
   * autonomous modes using the dashboard. The sendable chooser code works with the Java
   * SmartDashboard. If you prefer the LabVIEW Dashboard, remove all of the chooser code and
   * uncomment the getString line to get the auto name from the text box below the Gyro
   *
   * <p>You can add additional auto modes by adding additional comparisons to the switch structure
   * below with additional strings. If using the SendableChooser make sure to add them to the
   * chooser code above as well.
   */

  @Override
  public void autonomousInit() {
   /*  m_autoSelected = m_chooser.getSelected();
    m_autoSelected = SmartDashboard.getString("Auto Selector", kDefaultAuto);
    System.out.println("Auto selected: " + m_autoSelected); */
  }

  /** This function is called periodically during autonomous. */
  @Override
  public void autonomousPeriodic() {
    }


  /** This function is called once when teleop is enabled. */
  @Override
  public void teleopInit() {}

  /** This function is called periodically during operator control. */
  @Override
  public void teleopPeriodic() {
   
     boolean cross = PS5.getCrossButtonPressed();
     boolean triangle = PS5.getTriangleButtonPressed();
     boolean circle = PS5.getCircleButtonPressed();
     boolean square = PS5.getSquareButtonPressed();

     if (circle) {
      candle.setControl(new FireAnimation(10, 1000));
     }
     else if (triangle) {
      candle.setControl(new ColorFlowAnimation(10, 1000).withColor(Teal));
     }
     else if (cross) {
      candle.setControl(new StrobeAnimation(10, 1000).withColor(Lavender));
     }
     else if (square) {
      candle.setControl(new LarsonAnimation(10, 1000).withColor(Coral));
     }

    SmartDashboard.putBoolean("circle", circle);
    SmartDashboard.putBoolean("cross", cross);
    SmartDashboard.putBoolean("square", square);
    SmartDashboard.putBoolean("triangle", triangle);

  }

  /** This function is called once when the robot is disabled. */
  @Override
  public void disabledInit() {}

  /** This function is called periodically when disabled. */
  @Override
  public void disabledPeriodic() {}

  /** This function is called once when test mode is enabled. */
  @Override
  public void testInit() {}

  /** This function is called periodically during test mode. */
  @Override
  public void testPeriodic() {}

  /** This function is called once when the robot is first started up. */
  @Override
  public void simulationInit() {}

  /** This function is called periodically whilst in simulation. */
  @Override
  public void simulationPeriodic() {}

}

